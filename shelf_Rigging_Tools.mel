global proc shelf_Rigging_Tools () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Blueprint UI" 
        -enableBackground 0
        -align "center" 
        -label "import os\n\ntry:\n    riggingToolRoot=os.environ[\"RIGGING_TOOL_ROO..." 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "C:/RiggingTool/Icons/_shelf_blueprint.xpm" 
        -image1 "C:/RiggingTool/Icons/_shelf_blueprint.xpm" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import os\n\ntry:\n    riggingToolRoot=os.environ[\"RIGGING_TOOL_ROOT\"]\nexcept:\n    print \"RIGGING_TOOL_ROOT environment variable not correctly configured\"\nelse:\n    import sys\n    path = riggingToolRoot + \"/Modules\"\n    \n    if not path in  sys.path:\n        sys.path.append(path)\n       \n    import System.blueprint_UI as blueprint_UI\n    reload (blueprint_UI)\n    \n    UI = blueprint_UI.Blueprint_UI()" 
        -sourceType "python" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import os\n\ntry:\n    riggingToolRoot=os.environ[\"RIGGING_TOOL_ROOT\"]\nexcept:\n    print \"RIGGING_TOOL_ROOT environment variable not correctly configured\"\nelse:\n    import sys\n    path = riggingToolRoot + \"/Modules\"\n    \n    if not path in  sys.path:\n        sys.path.append(path)\n       \n    import System.attachGeoToBlueprint as attachGeoToBlueprint\n    reload (attachGeoToBlueprint)\n    \n    inst = attachGeoToBlueprint.AttachGeoToBlueprint_ShelfTool()\n    inst.attachWithParenting()" 
        -enableBackground 0
        -align "center" 
        -label "import os\n\ntry:\n    riggingToolRoot=os.environ[\"RIGGING_TOOL_ROO..." 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel ".......P" 
        -overlayLabelColor 0 0 0 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "C:/RiggingTool/Icons/_shelf_attachGeoToBlueprint.xpm" 
        -image1 "C:/RiggingTool/Icons/_shelf_attachGeoToBlueprint.xpm" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import os\n\ntry:\n    riggingToolRoot=os.environ[\"RIGGING_TOOL_ROOT\"]\nexcept:\n    print \"RIGGING_TOOL_ROOT environment variable not correctly configured\"\nelse:\n    import sys\n    path = riggingToolRoot + \"/Modules\"\n    \n    if not path in  sys.path:\n        sys.path.append(path)\n       \n    import System.attachGeoToBlueprint as attachGeoToBlueprint\n    reload (attachGeoToBlueprint)\n    \n    inst = attachGeoToBlueprint.AttachGeoToBlueprint_ShelfTool()\n    inst.attachWithParenting()" 
        -sourceType "python" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import os\n\ntry:\n    riggingToolRoot=os.environ[\"RIGGING_TOOL_ROOT\"]\nexcept:\n    print \"RIGGING_TOOL_ROOT environment variable not correctly configured\"\nelse:\n    import sys\n    path = riggingToolRoot + \"/Modules\"\n    \n    if not path in  sys.path:\n        sys.path.append(path)\n       \n    import System.attachGeoToBlueprint as attachGeoToBlueprint\n    reload (attachGeoToBlueprint)\n    \n    inst = attachGeoToBlueprint.AttachGeoToBlueprint_ShelfTool()\n    inst.attachWithSkinning()" 
        -enableBackground 0
        -align "center" 
        -label "import os\n\ntry:\n    riggingToolRoot=os.environ[\"RIGGING_TOOL_ROO..." 
        -labelOffset 0
        -font "plainLabelFont" 
        -imageOverlayLabel ".......S" 
        -overlayLabelColor 0 0 0 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "C:/RiggingTool/Icons/_shelf_attachGeoToBlueprint.xpm" 
        -image1 "C:/RiggingTool/Icons/_shelf_attachGeoToBlueprint.xpm" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import os\n\ntry:\n    riggingToolRoot=os.environ[\"RIGGING_TOOL_ROOT\"]\nexcept:\n    print \"RIGGING_TOOL_ROOT environment variable not correctly configured\"\nelse:\n    import sys\n    path = riggingToolRoot + \"/Modules\"\n    \n    if not path in  sys.path:\n        sys.path.append(path)\n       \n    import System.attachGeoToBlueprint as attachGeoToBlueprint\n    reload (attachGeoToBlueprint)\n    \n    inst = attachGeoToBlueprint.AttachGeoToBlueprint_ShelfTool()\n    inst.attachWithSkinning()" 
        -sourceType "python" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import os\n\ntry:\n    riggingToolRoot=os.environ[\"RIGGING_TOOL_ROOT\"]\nexcept:\n    print \"RIGGING_TOOL_ROOT environment variable not correctly configured\"\nelse:\n    import sys\n    path = riggingToolRoot + \"/Modules\"\n    \n    if not path in  sys.path:\n        sys.path.append(path)\n       \n    import System.characterInstall as characterInstall\n    reload (characterInstall)\n    \n    inst = characterInstall.InstallCharacter_UI()" 
        -enableBackground 0
        -align "center" 
        -label "import os\n\ntry:\n    riggingToolRoot=os.environ[\"RIGGING_TOOL_ROO..." 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "C:/RiggingTool/Icons/_shelf_character.xpm" 
        -image1 "C:/RiggingTool/Icons/_shelf_character.xpm" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import os\n\ntry:\n    riggingToolRoot=os.environ[\"RIGGING_TOOL_ROOT\"]\nexcept:\n    print \"RIGGING_TOOL_ROOT environment variable not correctly configured\"\nelse:\n    import sys\n    path = riggingToolRoot + \"/Modules\"\n    \n    if not path in  sys.path:\n        sys.path.append(path)\n       \n    import System.characterInstall as characterInstall\n    reload (characterInstall)\n    \n    inst = characterInstall.InstallCharacter_UI()" 
        -sourceType "python" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import os\n\ntry:\n    riggingToolRoot=os.environ[\"RIGGING_TOOL_ROOT\"]\nexcept:\n    print \"RIGGING_TOOL_ROOT environment variable not correctly configured\"\nelse:\n    import sys\n    path = riggingToolRoot + \"/Modules\"\n    \n    if not path in  sys.path:\n        sys.path.append(path)\n       \n    import System.deleteCharacter as deleteCharacter\n    reload (deleteCharacter)\n    \n    inst = deleteCharacter.DeleteCharacter_ShelfTool()" 
        -enableBackground 0
        -align "center" 
        -label "import os\n\ntry:\n    riggingToolRoot=os.environ[\"RIGGING_TOOL_ROO..." 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "C:/RiggingTool/Icons/_shelf_delete.xpm" 
        -image1 "C:/RiggingTool/Icons/_shelf_delete.xpm" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import os\n\ntry:\n    riggingToolRoot=os.environ[\"RIGGING_TOOL_ROOT\"]\nexcept:\n    print \"RIGGING_TOOL_ROOT environment variable not correctly configured\"\nelse:\n    import sys\n    path = riggingToolRoot + \"/Modules\"\n    \n    if not path in  sys.path:\n        sys.path.append(path)\n       \n    import System.deleteCharacter as deleteCharacter\n    reload (deleteCharacter)\n    \n    inst = deleteCharacter.DeleteCharacter_ShelfTool()" 
        -sourceType "python" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import os\n\ntry:\n    riggingToolRoot=os.environ[\"RIGGING_TOOL_ROOT\"]\nexcept:\n    print \"RIGGING_TOOL_ROOT environment variable not correctly configured\"\nelse:\n    import sys\n    path = riggingToolRoot + \"/Modules\"\n    \n    if not path in  sys.path:\n        sys.path.append(path)\n       \n    import System.moduleMaintenance_shelfTool as moduleMaintenance_shelfTool\n    #reload (moduleMaintenance_shelfTool)\n    \n    inst = moduleMaintenance_shelfTool.ModuleMaintenance_shelfTool()" 
        -enableBackground 0
        -align "center" 
        -label "import os\n\ntry:\n    riggingToolRoot=os.environ[\"RIGGING_TOOL_ROO..." 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "C:/RiggingTool/Icons/_shelf_moduleMaintenance.xpm" 
        -image1 "C:/RiggingTool/Icons/_shelf_moduleMaintenance.xpm" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import os\n\ntry:\n    riggingToolRoot=os.environ[\"RIGGING_TOOL_ROOT\"]\nexcept:\n    print \"RIGGING_TOOL_ROOT environment variable not correctly configured\"\nelse:\n    import sys\n    path = riggingToolRoot + \"/Modules\"\n    \n    if not path in  sys.path:\n        sys.path.append(path)\n       \n    import System.moduleMaintenance_shelfTool as moduleMaintenance_shelfTool\n    #reload (moduleMaintenance_shelfTool)\n    \n    inst = moduleMaintenance_shelfTool.ModuleMaintenance_shelfTool()" 
        -sourceType "python" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import os\n\ntry:\n    riggingToolRoot=os.environ[\"RIGGING_TOOL_ROOT\"]\nexcept:\n    print \"RIGGING_TOOL_ROOT environment variable not correctly configured\"\nelse:\n    import sys\n    path = riggingToolRoot + \"/Modules\"\n    \n    if not path in  sys.path:\n        sys.path.append(path)\n       \n    import System.animation_UI as animation_UI\n    #reload (moduleMaintenance_shelfTool)\n    \n    inst = animation_UI.Animation_UI()" 
        -enableBackground 0
        -align "center" 
        -label "import os\n\ntry:\n    riggingToolRoot=os.environ[\"RIGGING_TOOL_ROO..." 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.2 
        -image "C:/RiggingTool/Icons/_shelf_animatorsUI.xpm" 
        -image1 "C:/RiggingTool/Icons/_shelf_animatorsUI.xpm" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import os\n\ntry:\n    riggingToolRoot=os.environ[\"RIGGING_TOOL_ROOT\"]\nexcept:\n    print \"RIGGING_TOOL_ROOT environment variable not correctly configured\"\nelse:\n    import sys\n    path = riggingToolRoot + \"/Modules\"\n    \n    if not path in  sys.path:\n        sys.path.append(path)\n       \n    import System.animation_UI as animation_UI\n    reload (animation_UI)\n    \n    inst = animation_UI.Animation_UI()" 
        -sourceType "python" 
        -commandRepeatable 1
    ;
    shelfButton
        -enableCommandRepeat 1
        -enable 1
        -width 35
        -height 35
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "import maya.cmds as cmds\n\nselection = cmds.ls(selection=True)\nfor each in selection:\n    cmds.lockNode(each,lock=False,lockUnpublished=False) " 
        -enableBackground 0
        -align "center" 
        -label "import maya.cmds as cmds\n\nselection = cmds.ls(selection=True)\nfo..." 
        -labelOffset 0
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.25 
        -image "pythonFamily.png" 
        -image1 "pythonFamily.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\n\nselection = cmds.ls(selection=True)\nfor each in selection:\n    cmds.lockNode(each,lock=False,lockUnpublished=False) " 
        -sourceType "python" 
        -commandRepeatable 1
    ;

} 
